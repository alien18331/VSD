
`include "DataPath.sv"
`include "ControlUnit.sv"
`include "ALUController.sv"
`include "SRAM_wrapper.sv"

module top(
	input logic clk,rst);
	// output logic [31:0] WB_Data);
	
	logic [6:0] Opcode;
	logic ALUSrc;
	logic [1:0] MemToReg;
	logic Branch;
	logic MemWrite;
	logic MemRead;
	logic [1:0] ALUOp, ALUOp_reg;
	logic RegWrite;
	logic JalrSel;
	logic [1:0] RWSel;
	logic [2:0] Func3;
	logic [6:0] Func7;
	logic [3:0] ALU_Operation;
	
	//IM
	logic [13:0] IM_PC;
	logic [31:0] IM_Instr;
	
	//DM
	logic DM_MemRead;
	logic [3:0] DM_MemWrite;
	logic [13:0] DM_ALU_Result;
	logic [31:0] DM_RD2;
	logic [31:0] DM_Mem_ReadData;
	
	ControlUnit controller(IM_Instr[6:0], IM_Instr[14:12], ALUSrc, MemToReg, Branch, MemWrite, MemRead, ALUOp, RegWrite, JalrSel, RWSel);
	
	ALUController aluctrl(ALUOp_reg, Func3, Func7, ALU_Operation);
	
	DataPath datapath(clk, rst, ALUSrc, Branch, MemWrite, MemRead, RegWrite, JalrSel, MemToReg, ALUOp, RWSel, ALU_Operation, IM_Instr, DM_Mem_ReadData, IM_PC, DM_MemRead, DM_MemWrite, DM_ALU_Result, DM_RD2, ALUOp_reg, Func3, Func7); //Opcode
	
	//Instruction memory
	SRAM_wrapper IM1(clk, 		//clk
					1'b1, 		//sel (active high)
					1'b1, 		//output enable (active high)
					4'b1111,	//write enable (active low)
					IM_PC,		//address (16-bit, add 4 every cycle, W_PC[1:0] always 0)
					32'b0,		//data input
					IM_Instr);		//data output
					
	//Data memory
	SRAM_wrapper DM1(clk, 			//clk
					1'b1, 			//sel (active high)
					DM_MemRead, 	//output enable (active high)
					DM_MemWrite,	//write enable (active low)
					DM_ALU_Result,	//address (16-bit, add 4 every cycle, W_PC[1:0] always 0)
					DM_RD2,			//data input
					DM_Mem_ReadData);	//data output
					
endmodule